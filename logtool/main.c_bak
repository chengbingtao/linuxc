#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include "biTree.h"
#include "ftpTool.h"
#include "zcSend.h"
#include "list.h"
#include "outFile.h"
#define MAX_LINE 1024
#define PROFILE "profile.ini"

//struct biTreeNode **succTree=NULL;

//localPath	:the folder to store output file that download from ftp server
//ftpPath	:the folder that output file store any day
//function	:get outputfile from ftp server
//return	:if success the number of transed files;if no file trans,return 0;error -n 
int getOutFiles(char* ftpPath,char* localPath)
{
return 0;
}

/*
 *function	:delete the output files used over,don't delete the folder
 *localPath	:the folder that output file stored
 *return	:if success the number of deleted files,if no file be deleted,return 0,if error return -n
 * */
int deleteFiles(char* localPath)
{
return 0;
}


/*
 *function	:trieve log file,get records that status ar 4020,4030 and send successful 
 *successTree	:search tree data struct,store success record in log files
 *logFileArray	:all log files name
 *return	:the node number of successTree,means records 
 * */


unsigned long getLogRecords( BiTree *bitree4020,BiTree *bitree4030,char* logFileArray,char* retFile)
{
	//char* fileName;
	FILE* fp=NULL;
	int i;
	char cLine[MAX_LINE];
	char *p1;
	char cLsh[20];
//	char fileNameNew[1024];
//	FILE* fp4020,*fp4030;
	FILE* fpRet;
	unsigned long ul_1=0;
	
	//sprintf(fileNameNew,"%s.return",fileName);
	fpRet = fopen(retFile,"a");
	
	//for(i=0;i<fileCount;i++){
		//fileName = logFileArray;
		fp = fopen(logFileArray,"r");
		if(fp == NULL) return -1;
		if(fpRet == NULL) return -2;	
			
		memset(cLine,0,sizeof(cLine));
		while(fgets(cLine,LINE_MAX,fp) != NULL){
			p1 = strstr(cLine,"content=");
			if(p1){
				//p1 += 8;	//strlen("content=")
				if(strncmp(p1 + 8,"4020",4) ==0){
					memset(cLsh,0,sizeof(cLsh));
					strncpy(cLsh,p1 + 13,18);
				//	fputs(cLsh,fp4020);
					insertNode(bitree4020,cLsh);
					ul_1++;
				}

				if(strncmp(p1 + 8,"4030",4) ==0){
					memset(cLsh,0,sizeof(cLsh));
					strncpy(cLsh,p1 + 13,18);
				//	fputs(cLsh,fp4030);
					insertNode(bitree4020,cLsh);
					ul_1++;
				}
			}

			p1 = strstr(cLine,"pack=@");
			if(p1){
				p1 = strstr(cLine,"|0$");
				if(p1){
					memset(cLsh,0,sizeof(cLsh));
					strncpy(cLsh,p1+3,18);
				//	strcat(cLsh,"\n");
					fputs(cLsh,fpRet);
					ul_1++;
				}
			}
			memset(cLine,0,sizeof(cLine));	
		}
		fclose(fp);	
		
	//}
	fclose(fpRet);
	return ul_1;
}

void compareTree(BiTree* bitree4020,BiTree* bitree4030,char* fileName){
	FILE* fpRet;
	//char fileNameNew[1024];
	char cLine[20];
	unsigned long ul_1=0;

	//sprintf(fileNameNew,"%s.return",fileName);
	fpRet = fopen(fileName,"r");

	memset(cLine,0,sizeof(cLine));
	while(fread(cLine,18,1,fpRet) != NULL){
		deleteNode(bitree4020,cLine);
		deleteNode(bitree4030,cLine);
		ul_1++;
		memset(cLine,0,sizeof(cLine));
	}

	fclose(fpRet);
	printf("function compareTree : %d rows read to delete tree\n",ul_1);
}


void destroyPiao(void* data){
	struct piao *piao = (struct piao*)data;
	//printf("destroyPiao:%s\n",piao->cpkey);
	free(piao);
	piao=NULL;
}

int main(int argc, char* argv[]){
	
	int iRet=0;
	int i;
	int iRet2=0;
	char c[10];
	List listOut;	
	ListElement *ple=NULL;
	long lRet;
	struct piao *pTicket=NULL;
	char fmtNow[20];
	char fmtDate[11];
	char jvwgPath[1024];
	char retPath[1024];
	char jvwgFile[1024];
	char retFile[1024];
	char jvwgFileArray[100][1024];
	unsigned long recNum;
	BiTree biTree4020;
	BiTree biTree4030;
	BiTreeNode* btrnTmp;
	//ftp test ok!
	//char* ftp_path="ftp://192.168.1.108/Documents/t1.txt";
	//char* local_path="./t1.txt";
	//char* user="hdper";
	//char* pwd="hdper";

	//downloadsimple(user,pwd,ftp_path,local_path);
	


	//socket client test ok!
	//iRet = init_socket("192.168.31.88",9527);
	//sendbuff(iRet,"1234567890",10);
	//memset(c,0,10);
	//printf("sendbuff over\n");
	//iRet2 = recvbuff(iRet,c,&iRet);
	//if(0>iRet2) printf("recvbuff return %d\n,",iRet2); 
	//printf("return len:%d ;%s\n",iRet,c);
	//close(iRet);
	
	//store out file to link successful
	/*
	list_init(&listOut,destroyPiao);
	lRet = getTicket("./outfile/20200531/2019001lotls0000.out",&listOut);
	lRet = getTicket("./outfile/20200531/2019001lotfs0000.out",&listOut);
	
	ple = list_head(&listOut);

	pTicket = (struct piao *)list_data(ple);
	printf("%s;tiaoshu=%d;zhushu=%d\n",pTicket->cpkey,pTicket->tiaoshu,pTicket->tzs);
	while(true){
		//pTicket = (struct piao *)list_data(ple);
		//printf("%s\n",pTicket->cpkey);
		ple=list_next(ple);
		pTicket = (struct piao *)list_data(ple);
		printf("%s;tiaoshu=%d;zhushu=%d\n",pTicket->cpkey,pTicket->tiaoshu,pTicket->tzs);
		if(list_is_tail(ple))break;
	}
	list_destroy(&listOut);
	*/
	
	memset(fmtNow,0,sizeof(fmtNow));
	getSystemTime(fmtNow);
	printf("=================%s=================\n",fmtNow);
	sprintf(fmtDate,"2020-05-22");
	memset(jvwgPath,0,sizeof(jvwgPath));
	readini("profile.ini","jvwgfile","path",jvwgPath);
	
	memset(retPath,0,sizeof(retPath));
	readini("profile.ini","jvwgfile","return_path",retPath);
	memset(c,0,sizeof(c));
	strncpy(c,fmtDate,4);
	sprintf(retFile,"%s%s.txt",retPath,c);
	i=0;
	while(true){
		sprintf(jvwgFile,"%sdebug-%s.%d.log",jvwgPath,fmtDate,i);
		//printf("%s treated begin!\n",jvwgFile);	
		if(-1==access(jvwgFile,F_OK)) break;
		printf("%s treated begin!\n",jvwgFile);	
		
		//strcpy(jvwgFileArray[i] ,jvwgFile); 
		
		recNum = getLogRecords( &biTree4020,&biTree4030,jvwgFile,retFile);
		btrnTmp = minImum(&biTree4020);
		printf("4020 -1 min:%s\n",btrnTmp->data);
		btrnTmp = maxImum(&biTree4020);
		printf("4020 -1 max:%s\n",btrnTmp->data);
		compareTree(&biTree4020,&biTree4030,retFile);
		i++;
		
	btrnTmp = minImum(&biTree4020);
	printf("4020 -2 min:%s\n",btrnTmp->data);
	btrnTmp = maxImum(&biTree4020);
	printf("4020 -2 max:%s\n",btrnTmp->data);
	btrnTmp = minImum(&biTree4030);
	printf("4030 min:%s\n",btrnTmp->data);
	btrnTmp = maxImum(&biTree4030);
	printf("4030 min:%s\n",btrnTmp->data);
	}
	
	
	
	btrnTmp = minImum(&biTree4020);
	printf("4020 min:%s\n",btrnTmp->data);
	btrnTmp = maxImum(&biTree4020);
	printf("4020 max:%s\n",btrnTmp->data);
	btrnTmp = minImum(&biTree4030);
	printf("4030 min:%s\n",btrnTmp->data);
	btrnTmp = maxImum(&biTree4030);
	printf("4030 min:%s\n",btrnTmp->data);
	
	printf("deleteNode2 -1 begin!\n");
	btrnTmp = minImum(&biTree4020);
	while(btrnTmp != NULL){
		deleteNode2(&biTree4020, btrnTmp);
		btrnTmp = minImum(&biTree4020);
	}
	printf("deleteNode2 -1 end!\n");
	
	printf("deleteNode2 -2 begin!\n");
	btrnTmp = minImum(&biTree4030);
	while(btrnTmp != NULL){
		deleteNode2(&biTree4030, btrnTmp);
		btrnTmp = minImum(&biTree4030);
	}
	printf("deleteNode2 -2 end!\n");
	exit(0);


}
